# Core/Error
# AMSTEL_SOURCES_CORE_ERROR
set(AMSTEL_SOURCES_CORE_ERROR_HPP
${CMAKE_CURRENT_SOURCE_DIR}/Callstack.h
${CMAKE_CURRENT_SOURCE_DIR}/Error.h
)

set(AMSTEL_SOURCES_CORE_ERROR_HPP
	${AMSTEL_SOURCES_CORE_ERROR_HPP}
	
	PARENT_SCOPE
)

set(AMSTEL_SOURCES_CORE_ERROR_CPP
${CMAKE_CURRENT_SOURCE_DIR}/Callstack_Android.cpp
${CMAKE_CURRENT_SOURCE_DIR}/Callstack_Linux.cpp
${CMAKE_CURRENT_SOURCE_DIR}/Callstack_Windows.cpp
${CMAKE_CURRENT_SOURCE_DIR}/Error.cpp
)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/Callstack_Windows.cpp PROPERTIES HEADER_FILE_ONLY ON)
	set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/Callstack_Android.cpp PROPERTIES HEADER_FILE_ONLY ON)
endif()

# Does this work with MSVC?
# To check
if(MSVC)
	set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/Callstack_Android.cpp PROPERTIES HEADER_FILE_ONLY ON)
	set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/Callstack_Linux.cpp PROPERTIES HEADER_FILE_ONLY ON)
endif()

set(AMSTEL_SOURCES_CORE_ERROR_CPP
	${AMSTEL_SOURCES_CORE_ERROR_CPP}
	
	PARENT_SCOPE
)

set(AMSTEL_SOURCES_CORE_ERROR
	${AMSTEL_SOURCES_CORE_ERROR_HPP}
	${AMSTEL_SOURCES_CORE_ERROR_CPP}
	
	${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt
)

set(AMSTEL_SOURCES_CORE_ERROR
	${AMSTEL_SOURCES_CORE_ERROR}
	
	PARENT_SCOPE
)
cmake_minimum_required(VERSION 3.7.2)

set(TARGET_NAME RioCore)
if(TARGET ${TARGET_NAME})
    return()
endif()

project(${TARGET_NAME} CXX)

## AMSTEL_SOURCES_CORE
set(AMSTEL_SOURCES_CORE_HPP)
set(AMSTEL_SOURCES_CORE_CPP)
set(AMSTEL_SOURCES_CORE)

# Base
# AMSTEL_SOURCES_CORE_BASE
set(AMSTEL_SOURCES_CORE_BASE_HPP)
set(AMSTEL_SOURCES_CORE_BASE_CPP)
set(AMSTEL_SOURCES_CORE_BASE)
add_subdirectory(Base)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_BASE_HPP})
list(APPEND AMSTEL_SOURCES_CORE_CPP ${AMSTEL_SOURCES_CORE_BASE_CPP})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_BASE})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Base)
source_group("Base" FILES ${AMSTEL_SOURCES_CORE_BASE})

# Compat
# AMSTEL_SOURCES_CORE_COMPAT
# FreeBsd
# Ios
# MinGw
# Msvc
# NaCl
# OsX
set(AMSTEL_SOURCES_CORE_COMPAT)
add_subdirectory(Compat)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_COMPAT})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_COMPAT})

if(FREEBSD)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Compat/FreeBsd)
	source_group("Compat\\FreeBsd" FILES ${AMSTEL_SOURCES_CORE_COMPAT})
endif() # FREEBSD

if(IOS)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Compat/Ios)
	source_group("Compat\\Ios" FILES ${AMSTEL_SOURCES_CORE_COMPAT})
endif() # IOS

if(OSX)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Compat/OsX)
	source_group("Compat\\OsX" FILES ${AMSTEL_SOURCES_CORE_COMPAT})
endif() # OSX

if(MINGW)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Compat/MinGw)
	source_group("Compat\\MinGw" FILES ${AMSTEL_SOURCES_CORE_COMPAT})
endif() # MINGW

if(MSVC)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Compat/Msvc)
	source_group("Compat\\Msvc" FILES ${AMSTEL_SOURCES_CORE_COMPAT})
endif() # MSVC

if(NACL)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Compat/NaCl)
	source_group("Compat\\NaCl" FILES ${AMSTEL_SOURCES_CORE_COMPAT})
endif() # NACL

# Core/Containers
# AMSTEL_SOURCES_CORE_CONTAINERS
set(AMSTEL_SOURCES_CORE_CONTAINERS)
add_subdirectory(Containers)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_CONTAINERS})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_CONTAINERS})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Containers)
source_group("Containers" FILES ${AMSTEL_SOURCES_CORE_CONTAINERS})

# Core/Error
# AMSTEL_SOURCES_CORE_ERROR
set(AMSTEL_SOURCES_CORE_ERROR_HPP)
set(AMSTEL_SOURCES_CORE_ERROR_CPP)
set(AMSTEL_SOURCES_CORE_ERROR)
add_subdirectory(Error)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_ERROR_HPP})
list(APPEND AMSTEL_SOURCES_CORE_CPP ${AMSTEL_SOURCES_CORE_ERROR_CPP})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_ERROR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Error)
source_group("Error" FILES ${AMSTEL_SOURCES_CORE_ERROR})

# Core/FileSystem
# AMSTEL_SOURCES_CORE_FILESYSTEM
set(AMSTEL_SOURCES_CORE_FILESYSTEM_HPP)
set(AMSTEL_SOURCES_CORE_FILESYSTEM_CPP)
set(AMSTEL_SOURCES_CORE_FILESYSTEM)
add_subdirectory(FileSystem)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_FILESYSTEM_HPP})
list(APPEND AMSTEL_SOURCES_CORE_CPP ${AMSTEL_SOURCES_CORE_FILESYSTEM_CPP})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_FILESYSTEM})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/FileSystem)
if (${CMAKE_SYSTEM_NAME} STREQUAL "Android")
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Android)
endif() # ${CMAKE_SYSTEM_NAME} STREQUAL "Android"
source_group("FileSystem" FILES ${AMSTEL_SOURCES_CORE_FILESYSTEM})

# Core/Json
# AMSTEL_SOURCES_CORE_JSON
set(AMSTEL_SOURCES_CORE_JSON_HPP)
set(AMSTEL_SOURCES_CORE_JSON_CPP)
set(AMSTEL_SOURCES_CORE_JSON)
add_subdirectory(Json)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_JSON_HPP})
list(APPEND AMSTEL_SOURCES_CORE_CPP ${AMSTEL_SOURCES_CORE_JSON_CPP})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_JSON})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Json)
source_group("Json" FILES ${AMSTEL_SOURCES_CORE_JSON})

# Core/Math
# AMSTEL_SOURCES_CORE_MATH
set(AMSTEL_SOURCES_CORE_MATH_HPP)
set(AMSTEL_SOURCES_CORE_MATH_CPP)
set(AMSTEL_SOURCES_CORE_MATH)
add_subdirectory(Math)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_MATH_HPP})
list(APPEND AMSTEL_SOURCES_CORE_CPP ${AMSTEL_SOURCES_CORE_MATH_CPP})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_MATH})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Math)
source_group("Math" FILES ${AMSTEL_SOURCES_CORE_MATH})

# Core/Memory
# AMSTEL_SOURCES_CORE_MEMORY
set(AMSTEL_SOURCES_CORE_MEMORY_HPP)
set(AMSTEL_SOURCES_CORE_MEMORY_CPP)
set(AMSTEL_SOURCES_CORE_MEMORY)
add_subdirectory(Memory)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_MEMORY_HPP})
list(APPEND AMSTEL_SOURCES_CORE_CPP ${AMSTEL_SOURCES_CORE_MEMORY_CPP})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_MEMORY})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Memory)
source_group("Memory" FILES ${AMSTEL_SOURCES_CORE_MEMORY})

# Core/Network
# AMSTEL_SOURCES_CORE_NETWORK
set(AMSTEL_SOURCES_CORE_NETWORK)
add_subdirectory(Network)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_NETWORK})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_NETWORK})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Network)
source_group("Network" FILES ${AMSTEL_SOURCES_CORE_NETWORK})

# Core/Strings
# AMSTEL_SOURCES_CORE_STRINGS
set(AMSTEL_SOURCES_CORE_STRINGS_HPP)
set(AMSTEL_SOURCES_CORE_STRINGS_CPP)
set(AMSTEL_SOURCES_CORE_STRINGS)
add_subdirectory(Strings)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_STRINGS_HPP})
list(APPEND AMSTEL_SOURCES_CORE_CPP ${AMSTEL_SOURCES_CORE_STRINGS_CPP})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_STRINGS})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Strings)
source_group("Strings" FILES ${AMSTEL_SOURCES_CORE_STRINGS})

# Core/Thread
# AMSTEL_SOURCES_CORE_THREAD
set(AMSTEL_SOURCES_CORE_THREAD)
add_subdirectory(Thread)
list(APPEND AMSTEL_SOURCES_CORE_HPP ${AMSTEL_SOURCES_CORE_THREAD})
list(APPEND AMSTEL_SOURCES_CORE ${AMSTEL_SOURCES_CORE_THREAD})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/Thread)
source_group("Thread" FILES ${AMSTEL_SOURCES_CORE_THREAD})

list(APPEND AMSTEL_SOURCES_CORE ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)
add_library(${TARGET_NAME} ${AMSTEL_SOURCES_CORE_CPP} ${AMSTEL_SOURCES_CORE_HPP})

set_target_properties(${TARGET_NAME} PROPERTIES PREFIX "lib" DEBUG_POSTFIX "D")